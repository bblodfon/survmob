% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preprocess.R
\name{PipeOpLogTransform}
\alias{PipeOpLogTransform}
\title{PipeOpLogTransform}
\description{
Applies the \link[base:Log]{log()} function to every numeric feature of a Task.
NA's are ignored.
}
\section{Parameters}{

\itemize{
\item \code{base} :: \code{numeric(1)}\cr
The base of the logarithm. Default is to use a base of 2.
\item \code{offset} :: \code{numeric(1)}\cr
Offset value to add to each (numeric) feature.
Since this is primarily intended to be used with count mRNA data where there
are many zeros, default \code{offset} is 1 (to get a log value of 0).
}
}

\section{Initialization}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{PipeOpLogTransform$new()
polog = po('logtransform')
}\if{html}{\out{</div>}}
}

\examples{
library(mlr3proba)
library(mlr3pipelines)

df = data.frame(
  time = c(1,2,3,4),
  status = c(0,1,0,1),
  X1 = c(999,0,0,0),
  X2 = c(23,NA,0,0),
  X3 = c('a','b','c','d')
)

task = as_task_surv(x = df, id = 'test', time = 'time', event = 'status')

polog = po('logtransform')
polog$train(list(task))[[1L]] # X3 didn't change, X1 and X2 got log-transformed

}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpTaskPreproc]{mlr3pipelines::PipeOpTaskPreproc}} -> \code{PipeOpLogTransform}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpLogTransform-new}{\code{PipeOpLogTransform$new()}}
\item \href{#method-PipeOpLogTransform-clone}{\code{PipeOpLogTransform$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpLogTransform-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpLogTransform-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpLogTransform$new(id = "log_transform", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the resulting  object.}

\item{\code{param_vals}}{(\code{list()})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would
otherwise be set during construction.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpLogTransform-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpLogTransform-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpLogTransform$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
